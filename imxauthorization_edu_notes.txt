IMX AUTHORIZATION EDUCATION NOTES

Source CVS: https://cvs:8080/viewvc/cvs/pl/pack/imxauthorization.pck?view=log
Specification: https://ssmt.codixfr.private/ssmt/src/index.php?getfile&docid=1811&lng=EN

I. General
1.	What is the purpose of the package?

It provides the iMX authentication, token managment, and OTP issuuing

2.	Who uses it?

All modules who need to login (login forms), V9 hybrid, any OTP functionality

II.	Functional – password authentication

1.	What is password hash?

SELECT RAWTOHEX (DBMS_CRYPTO.HASH (UTL_I18N.STRING_TO_RAW ('test', 'AL32UTF8'), 2))
  FROM DUAL;
  
RAWTOHEX(DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW('TEST','AL32UTF8'),2))
-----------------------------------------------------------------------
098F6BCD4621D373CADE4E832627B4F6

MD5 ("test") => 098F6BCD4621D373CADE4E832627B4F6

"098F6BCD4621D373CADE4E832627B4F6" => ???

2.	The getPasswordHash function

SELECT imxauthorization.getPasswordHash ('test')
  FROM DUAL;

IMXAUTHORIZATION.GETPASSWORDHASH('TEST')
--------------------------------------------------------------------------------
$043547677

SELECT NVL (pwd_hash_type, 'DEFAULT')
  FROM g_etude;

NVL(PWD_HASH_TYPE,'DEFAULT')
----------------------------------------
DEFAULT

3.	The different algorithms: MD5, SHA1, SHA512

SELECT imxauthorization.getPasswordHash ('test', 'SHA1')
  FROM DUAL;

IMXAUTHORIZATION.GETPASSWORDHASH('TEST','SHA1')
--------------------------------------------------------------------------------
$2A94A8FE5CCB19BA61C4C0873D391E987982FBBD3

SELECT imxauthorization.getPasswordHash ('test', 'SH512')
  FROM DUAL;

IMXAUTHORIZATION.GETPASSWORDHASH('TEST','SH512')
--------------------------------------------------------------------------------
$3EE26B0DD4AF7E749AA1A8EE3C10AE9923F618980772E473F8819A5D4940E0DB27AC185F8A0E1D5
F84F88BC887FD67B143732C304CC5FA9AD8E6F57F50028A8FF

4.	Salt? PBKDF2 and why it?

Rainbow table:
...
"098F6BCD4621D373CADE4E832627B4F6" = "test"
...

What is 098F6BCD4621D373CADE4E832627B4F6? It is "test"

The salt must be unique for each user, that's why we must know for which user we check the password, and that's why getPasswordHash isn't apropriate.
So we develop new function checkLogin (login, plaintext, optional_crypto_options). And it returns TRUE or FALSE. This is done on imxauithorization level
years ago, but still in processing in all related. The big ticket is https://tts.codix.eu/jira/browse/CODIXDEV-15467

III.	Functional – tokens
1.	Get and Validate tokes

SELECT imxauthorization.getLongToken ('my secret data')
  FROM DUAL;
  
IMXAUTHORIZATION.GETLONGTOKEN('MYSECRETDATA')
------------------------------------------------------------
E66KMAUBX10CYXVUZI97VBS10SHJYJ79IC7YG6FF1NDZ8KKGJXVDLUPEZN4K

SELECT imxauthorization.getLongTokenData ('E66KMAUBX10CYXVUZI97VBS10SHJYJ79IC7YG6FF1NDZ8KKGJXVDLUPEZN4K')
  FROM DUAL;
  
IMXAUTHORIZATION.GETLONGTOKENDATA('E66KMAUBX10CYXVUZI97VBS10SHJYJ79IC7YG6FF1NDZ8KKGJXVDLUPEZN4K')
-------------------------------------------------------------------------------------------------
my secret data

SELECT TO_CHAR (valid_to, 'YYYY-MM-DD HH24:MI:SS') || ' ' || data || ' ' || token
  FROM t_tmp_ids_long
 WHERE data = 'my secret data';

TO_CHAR(VALID_TO,'YYYY-MM-DDHH24:MI:SS')||''||DATA||''||TOKEN
-------------------------------------------------------------------
2023-02-16 15:17:40 my secret data BF6E7EE59DC3B9B8995E01AAD8C98AE1

BF6E7EE59DC3B9B8995E01AAD8C98AE1 = MD5 ('E66KMAUBX10CYXVUZI97VBS10SHJYJ79IC7YG6FF1NDZ8KKGJXVDLUPEZN4K')

SELECT RAWTOHEX (DBMS_CRYPTO.HASH (UTL_I18N.STRING_TO_RAW ('E66KMAUBX10CYXVUZI97VBS10SHJYJ79IC7YG6FF1NDZ8KKGJXVDLUPEZN4K', 'AL32UTF8'), 2))
  FROM DUAL;
  
RAWTOHEX(DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW('E66KMAUBX10CYXVUZI97VBS10SHJYJ79IC7YG6FF1NDZ8KKGJXVDLUPEZN4K','AL32UTF8'),2))
-------------------------------------------------------------------------------------------------------------------------------
BF6E7EE59DC3B9B8995E01AAD8C98AE1

IV.	Other behaviors
1.	OTP (One time password) -- KASA example

SELECT otp_type, type_of_contact
  FROM otp_code_settings;

OTP_TYPE       TYPE_OF_CONTACT
-------------- ---------------
FIRST LOGIN    GSM
OTP EXTRANET   GSM

SELECT imxauthorization.sendOTPCode ('FIRST LOGIN', '1234567890')
  FROM DUAL;

IMXAUTHORIZATION.SENDOTPCODE('FIRSTLOGIN','1234567890')
-------------------------------------------------------
                                                   5701
                                                   
SELECT TO_CHAR (dtcreat, 'YYYY-MM-DD HH24:MI:SS') || ' ' || refsms || ' ' || numero || ' ' || texte || ' ' ||  otp_type || ' ' ||  otp_code
  FROM t_sms_flux
 WHERE dtcreat >= TRUNC (SYSDATE)
   AND otp_type IS NOT NULL;
   
TO_CHAR(DTCREAT,'YYYY-MM-DDHH24:MI:SS')||''||REFSMS||''||NUMERO||''||TEXTE||''||OTP_TYPE||''||OTP_CODE
---------------------------------------------------------------------------------------------------------------------------------------------
2023-02-15 15:32:44 A00003ZY 1234567890 Molia izpolzvaite slednia OTP code:96822193Za da polu4ite dostup do aplikaciata! FIRST LOGIN 96822193

-> 96822193 is a random value

SELECT imx_un_id, code_val, code_gen_tmpstmp, settings_id
  FROM otp_codes WHERE imx_un_id = '5701';

 IMX_UN_ID CODE_VAL                         CODE_GEN_TMPSTMP               SETTINGS_ID
---------- -------------------------------- ----------------------------- -------------
      5701 D7A758B357A1D8A39DDB8361BD47D742 15-FEB-23 03.32.43.960328 PM   601
      

-> D7A758B357A1D8A39DDB8361BD47D742 is MD5 (96822193):

SELECT RAWTOHEX (DBMS_CRYPTO.HASH (UTL_I18N.STRING_TO_RAW ('96822193', 'AL32UTF8'), 2))
  FROM DUAL;
  
RAWTOHEX(DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW('96822193','AL32UTF8'),2))
---------------------------------------------------------------------------
D7A758B357A1D8A39DDB8361BD47D742

SELECT imxauthorization.validateOTPCode ('5701', '96822193')
  FROM DUAL;

IMXAUTHORIZATION.VALIDATEOTPCODE('5701','96822193')
---------------------------------------------------
VALIDATED

SELECT attempt_tmpstmp, log_status
  FROM otp_attempt_log
 WHERE imx_un_id = '5701';

ATTEMPT_TMPSTMP               LOG_STATUS
----------------------------- ----------
15-FEB-23 03.56.45.251345 PM  VALIDATED


V.	The real password salting
1.	checkLogin -- TEST ON BETA

SELECT refperso, password
  FROM g_personnel
 WHERE login = 'imx';

  REFPERSO PASSWORD
---------- ----------------------------------------------------------------------------------------------------------------------------------
         1 $3F01AF3745CB70CD94D5DDB1E3C02D051D98F4438A357500127B4A7FA1C187D9A372F9A2252A2D8911C7C7C0C68AED23363ECA6E79365EA26B053B7F1A75E459C
         
SELECT imxauthorization.getPasswordHash ('crx')
  FROM DUAL;

IMXAUTHORIZATION.GETPASSWORDHASH('CRX')
----------------------------------------------------------------------------------------------------------------------------------
$3F01AF3745CB70CD94D5DDB1E3C02D051D98F4438A357500127B4A7FA1C187D9A372F9A2252A2D8911C7C7C0C68AED23363ECA6E79365EA26B053B7F1A75E459C

SQL> 

SELECT imxauthorization.checkLogin ('imx', 'crx')
  FROM DUAL;
  
IMXAUTHORIZATION.CHECKLOGIN('IMX','CRX')
----------------------------------------
                                       0

SELECT imxauthorization.checkLogin ('imx', 'wrong')
  FROM DUAL;
  
IMXAUTHORIZATION.CHECKLOGIN('IMX','WRONG')
------------------------------------------
                                        12

-- IF strHashStamp || strPassword != getPasswordHash (pPlain, strPassHashType, numRefperso)
-- THEN
--   RETURN 12;
-- END IF;

2.	Password stamping

  CASE strDBHashType
    WHEN 'DEFAULT' THEN strPassword := '$0' || strPassword;
    WHEN 'MD5/0.5' THEN strPassword := '$1' || strPassword;
    WHEN 'SHA1'    THEN strPassword := '$2' || strPassword;
    WHEN 'SH512'   THEN strPassword := '$3' || strPassword;
    WHEN 'MD5'     THEN strPassword := '$4' || strPassword;
    WHEN 'PBKDF2'  THEN strPassword := '$5' || strPassword;
    
-> we can migrate the algorythm without rehash everyhing. 

VI.	The supplementary support stamping scripts:
1. Stamp iMX and since 1.3 and Extranet passwords
https://cvs:8080/viewvc/cvs/BD/stamp_passwords.sql?view=log

2. Stamp Extranet passwords
https://cvs:8080/viewvc/cvs/BD/stamp_ec_passwords.sql?view=log

3. A script which migrates from default algorythm to SHA512 keeping user's passwords
https://cvs:8080/viewvc/cvs/BD/deftosh512h.sql?view=log

VII.	Practical
1.	Checking the current version, obtaining the package source from the database

# Setup CVS
export CVSROOT=:pserver:${SUDO_USER}@cvs.imxbg:/app/cvs/repo

# Obtain status
cvs status imxauthorization.pck

virtuoso.codixfr.private beta-/beta/intra/imx/base/pl/pack> cvs status imxauthorization.pck
===================================================================
File: imxauthorization.pck      Status: Needs Patch

   Working revision:    1.32
   Repository revision: 1.34    /app/cvs/repo/pl/pack/imxauthorization.pck,v
   Sticky Tag:          (none)
   Sticky Date:         (none)
   Sticky Options:      (none)

# Obtain log
cvs log imxauthorization.pck
...

# running version:
SELECT imxauthorization.packVersion ()
  FROM DUAL;

IMXAUTHORIZATION.PACKVERSION()
--------------------------------------------------------------------------------
Version <$Revision: 1.22.2.4 $ $Date: 2022/01/25 14:36:39 $>

# running source
SET PAGES 9999
SET LINES 9999
SET LONG 9999
SELECT text
  FROM all_source
 WHERE name = 'IMXAUTHORIZATION'
 ORDER BY line;

2.	Run and install the package

# Run/Install the package
cd $IMX_HOME/pl/pack
sql
@imxauthorization.pck

# or
sqlplus `get_oracle_name.sh`/`get_oracle_password.sh` @$IMX_HOME/pl/pack/imxauthorization.pck

3.	Checkout, Commit, PR

# Setup CVS
export CVSROOT=:pserver:${SUDO_USER}@cvs.imxbg:/app/cvs/repo

# Obtain status
cvs status imxauthorization.pck

# Obtain editors
cvs editors imxauthorization.pck

# Remove sticky tag (for main branch modifs)
cvs update -A imxauthorization.pck

# Update to revision 1.34
cvs update -r1.34 imxauthorization.pck

# Before do modification
cvs edit imxauthorization.pck

-> when done, run imxauthorization.pck and test it!

# When test is OK  commit
cvs commit imxauthorization.pck

4.	Troubleshooting:
a.	User X says that enter password Y but isn’t authorized – how to check?

SELECT password, imxauthorization.getPasswordHash ('crx')
  FROM g_personnel
 WHERE login = 'imx';
 
PASSWORD
---------------------------------------------------------------------------------------------------------------------------------
$3F01AF3745CB70CD94D5DDB1E3C02D051D98F4438A357500127B4A7FA1C187D9A372F9A2252A2D8911C7C7C0C68AED23363ECA6E79365EA26B053B7F1A75E459C
$3F01AF3745CB70CD94D5DDB1E3C02D051D98F4438A357500127B4A7FA1C187D9A372F9A2252A2D8911C7C7C0C68AED23363ECA6E79365EA26B053B7F1A75E459C

b.	How to reset a password

UPDATE g_personnel
   SET password = imxauthorization.getPasswordHash ('crx')
 WHERE login = 'imx';
 
SELECT imxauthorization.changePassword ('imx', 'crx', 'crx')
  FROM DUAL;

IMXAUTHORIZATION.CHANGEPASSWORD('IMX','CRX','CRX')
--------------------------------------------------
                                                 0

SQL> 

c.	Basic hack-tricks – who is with password ‘crx’?

SELECT login
  FROM g_personnel
 WHERE password = imxauthorization.getPasswordHash ('crx');

d.	Basic hack-tricks – the getPass function -- TEST ON EASY

SELECT NVL (pwd_hash_type, 'DEFAULT')
  FROM g_etude;

NVL(PWD_HASH_TYPE,'DEFAULT')
----------------------------------------
DEFAULT

SELECT password
  FROM g_personnel
 WHERE login = 'imx';

PASSWORD
--------------------------------------------------------------------------------
823677

SELECT getpass ('imx')
  FROM DUAL;

GETPASS('IMX')
--------------
crx

--> THIS FUNCTION WORKS ONLY WITH DEFAULT HASH AND UNSTAMPED PASSWORDS

VIII.	AD
1.	When migrate to stamped version, to alert the AD team: contact Nikolay Nikolov <nnikolov@codix.bg> and Julia Tasheva <jtasheva@codix.bg> when stamp new instance.
